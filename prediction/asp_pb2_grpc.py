# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import asp_pb2 as asp__pb2


class ASPStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.action_success_prediction = channel.unary_unary(
                '/ASP/action_success_prediction',
                request_serializer=asp__pb2.ASPInput.SerializeToString,
                response_deserializer=asp__pb2.ASPOutput.FromString,
                )
        self.action_grasp_inference = channel.unary_unary(
                '/ASP/action_grasp_inference',
                request_serializer=asp__pb2.ASPOutput.SerializeToString,
                response_deserializer=asp__pb2.AGPair.FromString,
                )
        self.set_threshold = channel.unary_unary(
                '/ASP/set_threshold',
                request_serializer=asp__pb2.DValue.SerializeToString,
                response_deserializer=asp__pb2.NoValue.FromString,
                )


class ASPServicer(object):
    """Missing associated documentation comment in .proto file."""

    def action_success_prediction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def action_grasp_inference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_threshold(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ASPServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'action_success_prediction': grpc.unary_unary_rpc_method_handler(
                    servicer.action_success_prediction,
                    request_deserializer=asp__pb2.ASPInput.FromString,
                    response_serializer=asp__pb2.ASPOutput.SerializeToString,
            ),
            'action_grasp_inference': grpc.unary_unary_rpc_method_handler(
                    servicer.action_grasp_inference,
                    request_deserializer=asp__pb2.ASPOutput.FromString,
                    response_serializer=asp__pb2.AGPair.SerializeToString,
            ),
            'set_threshold': grpc.unary_unary_rpc_method_handler(
                    servicer.set_threshold,
                    request_deserializer=asp__pb2.DValue.FromString,
                    response_serializer=asp__pb2.NoValue.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ASP', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ASP(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def action_success_prediction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ASP/action_success_prediction',
            asp__pb2.ASPInput.SerializeToString,
            asp__pb2.ASPOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def action_grasp_inference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ASP/action_grasp_inference',
            asp__pb2.ASPOutput.SerializeToString,
            asp__pb2.AGPair.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_threshold(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ASP/set_threshold',
            asp__pb2.DValue.SerializeToString,
            asp__pb2.NoValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
